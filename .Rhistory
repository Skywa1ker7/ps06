))
# Define UI
ui <- navbarPage(
tabPanel("x"),
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("plot",
sidebarLayout(
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
)
ui <- navbarPage(
tabPanel("x"),
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("plot",
sidebarLayout(
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
)
# Define server
server <- function(input, output) {
# Filter the data based on user input
filtered_data <- reactive({
data <- iris %>% filter(Sepal.Length >= input$sepal_length[1] & Sepal.Length <= input$sepal_length[2])
data <- data %>% filter(Sepal.Width >= input$sepal_width[1] & Sepal.Width <= input$sepal_width[2])
data <- data %>% filter(Petal.Length >= input$petal_length[1] & Petal.Length <= input$petal_length[2])
return(data)
})
output$filtered_table <- renderDataTable({
filtered_data()
})
output$row_count <- renderText({
paste("Number of rows:", nrow(filtered_data()))
})
output$myhist <- renderPlot({
colm <- as.numeric(input$var)
hist(iris[,colm], breaks=seq(0, max(iris[,colm], l=input$bins+1)))
})
}
ui <- navbarPage(
tabPanel("x"),
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("plot",
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
# Define server
server <- function(input, output) {
# Filter the data based on user input
filtered_data <- reactive({
data <- iris %>% filter(Sepal.Length >= input$sepal_length[1] & Sepal.Length <= input$sepal_length[2])
data <- data %>% filter(Sepal.Width >= input$sepal_width[1] & Sepal.Width <= input$sepal_width[2])
data <- data %>% filter(Petal.Length >= input$petal_length[1] & Petal.Length <= input$petal_length[2])
return(data)
})
output$filtered_table <- renderDataTable({
filtered_data()
})
output$row_count <- renderText({
paste("Number of rows:", nrow(filtered_data()))
})
output$myhist <- renderPlot({
colm <- as.numeric(input$var)
hist(iris[,colm], breaks=seq(0, max(iris[,colm], l=input$bins+1)))
})
}
# Run the app
shinyApp(ui, server)
ui <- navbarPage(
tabPanel("x"),
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("plot",
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
# Define server
server <- function(input, output) {
# Filter the data based on user input
filtered_data <- reactive({
data <- iris %>% filter(Sepal.Length >= input$sepal_length[1] & Sepal.Length <= input$sepal_length[2])
data <- data %>% filter(Sepal.Width >= input$sepal_width[1] & Sepal.Width <= input$sepal_width[2])
data <- data %>% filter(Petal.Length >= input$petal_length[1] & Petal.Length <= input$petal_length[2])
return(data)
})
output$filtered_table <- renderDataTable({
filtered_data()
})
output$row_count <- renderText({
paste("Number of rows:", nrow(filtered_data()))
})
output$myhist <- renderPlot({
colm <- as.numeric(input$var)
hist(iris[,colm], breaks=seq(0, max(iris[,colm], l=input$bins+1)))
})
}
# Run the app
shinyApp(ui, server)
# Define UI
ui <- navbarPage(
tabPanel("x"),
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("placeholder"),
tabPanel("plot",
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
ui <- navbarPage(
tabPanel("x"),
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("placeholder"),
tabPanel("plot",
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
# Define server
server <- function(input, output) {
# Filter the data based on user input
filtered_data <- reactive({
data <- iris %>% filter(Sepal.Length >= input$sepal_length[1] & Sepal.Length <= input$sepal_length[2])
data <- data %>% filter(Sepal.Width >= input$sepal_width[1] & Sepal.Width <= input$sepal_width[2])
data <- data %>% filter(Petal.Length >= input$petal_length[1] & Petal.Length <= input$petal_length[2])
return(data)
})
output$filtered_table <- renderDataTable({
filtered_data()
})
output$row_count <- renderText({
paste("Number of rows:", nrow(filtered_data()))
})
output$myhist <- renderPlot({
colm <- as.numeric(input$var)
hist(iris[,colm], breaks=seq(0, max(iris[,colm], l=input$bins+1)))
})
}
# Run the app
shinyApp(ui, server)
# Define UI
ui <- navbarPage("infoPs6",
tabPanel("x"),
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("placeholder"),
tabPanel("plot",
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
ui <- navbarPage("infoPs6",
tabPanel("x"),
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("placeholder"),
tabPanel("plot",
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
# Define server
server <- function(input, output) {
# Filter the data based on user input
filtered_data <- reactive({
data <- iris %>% filter(Sepal.Length >= input$sepal_length[1] & Sepal.Length <= input$sepal_length[2])
data <- data %>% filter(Sepal.Width >= input$sepal_width[1] & Sepal.Width <= input$sepal_width[2])
data <- data %>% filter(Petal.Length >= input$petal_length[1] & Petal.Length <= input$petal_length[2])
return(data)
})
output$filtered_table <- renderDataTable({
filtered_data()
})
output$row_count <- renderText({
paste("Number of rows:", nrow(filtered_data()))
})
output$myhist <- renderPlot({
colm <- as.numeric(input$var)
hist(iris[,colm], breaks=seq(0, max(iris[,colm], l=input$bins+1)))
})
}
# Run the app
shinyApp(ui, server)
# Define UI
ui <- navbarPage("infoPs6",
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("plot",
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
ui <- navbarPage("infoPs6",
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("plot",
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
# Define server
server <- function(input, output) {
ui <- navbarPage("infoPs6",
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("plot",
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
# Define server
server <- function(input, output) {
# Filter the data based on user input
filtered_data <- reactive({
data <- iris %>% filter(Sepal.Length >= input$sepal_length[1] & Sepal.Length <= input$sepal_length[2])
data <- data %>% filter(Sepal.Width >= input$sepal_width[1] & Sepal.Width <= input$sepal_width[2])
data <- data %>% filter(Petal.Length >= input$petal_length[1] & Petal.Length <= input$petal_length[2])
return(data)
})
output$filtered_table <- renderDataTable({
filtered_data()
})
output$row_count <- renderText({
paste("Number of rows:", nrow(filtered_data()))
})
output$myhist <- renderPlot({
colm <- as.numeric(input$var)
hist(iris[,colm], breaks=seq(0, max(iris[,colm], l=input$bins+1)))
})
}
# Run the app
shinyApp(ui, server)
ui <- navbarPage("infoPs6",
tabPanel("Iris Dataset",
sidebarLayout(
sidebarPanel(
sliderInput("sepal_length", "Select Sepal Length Range:", min = 0, max = max(iris$Sepal.Length), value = c(0, max(iris$Sepal.Length)), step = 0.1),
sliderInput("sepal_width", "Select Sepal Width Range:", min = 0, max = max(iris$Sepal.Width), value = c(0, max(iris$Sepal.Width)), step = 0.1),
sliderInput("petal_length", "Select Petal Length Range:", min = 0, max = max(iris$Petal.Length), value = c(0, max(iris$Petal.Length)), step = 0.1)
),
mainPanel(
dataTableOutput("filtered_table"),
textOutput("row_count")
)
)
),
tabPanel("plot",
sidebarPanel(
selectInput("var", "Select value from Iris measures",
choices = c("Sepal.Length"=1, "Sepal.Width"=2, "Petal.Length"=3,
"Petal.Width"=4)),
sliderInput("bins", "Select bin size", min = 6, max = 30, value = 12),
radioButtons("color", "select histogram color", choices = c("green", "red","yellow"),
selected = "yellow")
)
),
mainPanel(
plotOutput("myhist")
)
)
# Define server
server <- function(input, output) {
# Filter the data based on user input
filtered_data <- reactive({
data <- iris %>% filter(Sepal.Length >= input$sepal_length[1] & Sepal.Length <= input$sepal_length[2])
data <- data %>% filter(Sepal.Width >= input$sepal_width[1] & Sepal.Width <= input$sepal_width[2])
data <- data %>% filter(Petal.Length >= input$petal_length[1] & Petal.Length <= input$petal_length[2])
return(data)
})
output$filtered_table <- renderDataTable({
filtered_data()
})
output$row_count <- renderText({
paste("Number of rows:", nrow(filtered_data()))
})
output$myhist <- renderPlot({
colm <- as.numeric(input$var)
hist(iris[,colm], breaks=seq(0, max(iris[,colm], l=input$bins+1)))
})
}
# Run the app
shinyApp(ui, server)
shinyApp(ui, server)
